let isSac: boolean = false;
export const aHuntbot = async () => {
  await send("hb");

  global.channel
    .createMessageCollector({
      filter: (msg) =>
        msg.author.id == global.owoID &&
        msg.embeds[0] &&
        msg.embeds[0].author !== null &&
        msg.embeds[0].author.name.includes(msg.guild?.members.me?.displayName!),
      max: 1,
      time: 15_000,
    })
    .once("collect", async (message: Message) => {
      if (!global.config.autoHunt) return;
      if (timeoutHuntbot && new Date() < timeoutHuntbot) return;

      if (!message.embeds[0] && message.content.includes("BEEP BOOP. I AM BACK")) aHuntbot(); gọi lại func khi huntbot trả pet

      const embed = message.embeds[0];
      const quality = embed.fields[7];
      const progress = embed.fields[8];

      if (progress) {
        Nếu đang chạy dở thì set lại time rồi thoát
        setTime(progress.value);
        return;
      }

      if (!isSac && global.config.autoSac && global.config.autoSac.length !== 0) {
        await send(`sc ${getPet(global.config.autoSac).join(" ")}`);
        isSac = true;
        return aHuntbot();
      }

      if (global.config.upgradeTrait && global.config.upgradeTrait !== 0) {
        nâng cấp
        const trait = embed.fields[global.config.upgradeTrait].value;
        if (trait.includes(`[MAX]`)) {
          nếu max thì bỏ qua
          global.config.upgradeTrait = 0;
          return log("Trait Max Level Reached, Auto Upgrade Trait has been Disabled", "i");
        }

        const arr = trait.match(/\[(\d+)\/(\d+)\]/);
        if (arr) {
          const essenceNeed = parseInt(arr[2], 10) - parseInt(arr[1], 10);
          const essenceHave = quality.name.match(/<a:essence:451638978299428875> Animal Essence - `(\d+)`/i);
          if (typeof essenceHave === "number") {
            if (essenceHave - essenceNeed < 0) {
              nếu cung < cầu thì hủy
              return log("Insufficient Essence, Auto Upgrade Trait has been Skipped", "e");
            } else {
              let traitName: string;
              switch (global.config.upgradeTrait) {
                case 1:
                  traitName = "efficiency";
                  break;
                case 2:
                  traitName = "time";
                  break;
                case 3:
                  traitName = "cost";
                  break;
                case 4:
                  traitName = "gain";
                  break;
                case 5:
                  traitName = "exp";
                  break;
                case 6:
                  traitName = "radar";
                  break;
              }
              send(`upg ${traitName!} all`);
            }
          }
        }
      }

      await send("hb 1");
      global.channel
        .createMessageCollector({
          filter: (msg) =>
            msg.author.id == global.owoID &&
            msg.content.includes(msg.guild?.members.me?.displayName!) &&
            msg.attachments.first() != undefined &&
            msg.content.includes("Here is your password!"),
          max: 1,
          time: 15_000,
        })
        .on("collect", async (msg: Message) => {
          if (!msg) aHuntbot();
          const imageUrl = msg.attachments.first()?.url;
          if (!imageUrl) throw new Error("Could Not Retrieve Captcha Image URL");
          await solveCaptcha(imageUrl, async (data: string) => {
            const answer = data;
            console.log(answer);
            if (!answer || /\d/.test(answer)) {
              throw new Error(
                answer ? `Captcha Solving Returns Invalid Answer: ${answer}` : "Could Not Retrieve Captcha Answer"
              );
            }
            await send(`hb 24h ${answer}`);
            global.channel
              .createMessageCollector({
                filter: (_msg) =>
                  _msg.author.id === global.owoID && _msg.content.includes(_msg.guild?.members.me?.displayName!),
                max: 1,
                time: 15_000,
              })
              .once("collect", async (_msg) => {
                if (_msg.content.includes("BEEP BOOP. Chloe, YOU SPENT")) {
                  setTime(_msg.content);
                  if (timeoutHuntbot) {
                    const timeDiff = timeoutHuntbot.valueOf() - new Date().valueOf();
                    timeHandler(0, timeDiff, true);
                  }
                } else {
                  log("I have error when solve password of huntbot!!", "e");
                }
              });
          });
        });
    });
};

    // { condition: global.config.autoHunt && (!timeoutHuntbot || new Date() > timeoutHuntbot), action: aHuntbot },

const getFiles = (dir: string, suffix: string): string[] => {
  const files: fs.Dirent[] = fs.readdirSync(dir, {
    withFileTypes: true,
  });

  let commandFiles: string[] = [];

  for (const file of files) {
    if (file.isDirectory()) {
      commandFiles = [...commandFiles, ...getFiles(path.join(dir, file.name), suffix)];
    } else if (file.name.endsWith(suffix)) commandFiles.push(path.join(dir, file.name));
  }
  return commandFiles;
};

const solveCaptcha = async (url?: string) => {
  if (url) {
    const response = await axios.get(url, {
      responseType: "arraybuffer",
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        "Content-Type": "application/octet-stream",
      },
    });
    const imageBuffer = Buffer.from(response.data, "binary").toString("base64");
    if (global.config.captchaAPI == 1) {
      const obj = {
        userid: global.config.apiUser,
        apikey: global.config.apiKey,
        data: imageBuffer,
      };
      return new Promise(async (resolve, reject) => {
        const res = await axios
          .post("https://api.apitruecaptcha.org/one/gettext", obj, {
            headers: { "Content-Type": "application/json" },
          })
          .catch(reject);
        if (res) resolve(res.data.result);
      });
    } else if (global.config.captchaAPI == 2) {
      const solver = new Captcha.Solver(global.config.apiKey!);
      return new Promise(async (resolve, reject) => {
        const res = await solver.imageCaptcha(imageBuffer).catch(reject);
        if (res) resolve(res.data);
      });
    }
  }
};

const supportedAudioExtensions = [".wav", ".mp3", ".m4a", ".flac", ".ogg", "aac"];

const webhook = (cache?: string) => {
  return new InquirerInputQuestion<{ answer: string }>({
    type: "input",
    message: "Enter your webhook link",
    validate: (answer: string) => {
      return answer.match(/(^.*(discord|discordapp)\.com\/api\/webhooks\/([\d]+)\/([a-zA-Z0-9_-]+)$)/gm)
        ? true
        : "Invalid Webhook";
    },
    default: cache,
  });
};

const musicNotify = (cache?: string) => {
  return new InquirerInputQuestion<{ answer: string }>({
    type: "input",
    message: "Enter music file/directory path",
    validate: (answer: string) => {
      if (!/^([a-zA-Z]:)?(\/?[^\/\0+]+)+(\/[^\/\0]+)?$/.test(answer)) return "Invalid Path";
      if (!fs.existsSync(answer)) return "Path Not Found!";
      const stats = fs.statSync(answer);
      if (stats.isDirectory()) {
        if (fs.readdirSync(answer).some((file) => supportedAudioExtensions.includes(path.extname(file)))) return true;
        return "No Supported File Found!";
      }
      if (stats.isFile() && supportedAudioExtensions.includes(path.extname(answer))) return true;
      return "Invalid Directory";
    },
    default: cache,
  });
};

const music2 = (directory: string) => {
  const supportedFiles = fs
    .readdirSync(directory)
    .filter((file) => supportedAudioExtensions.includes(path.extname(file)));
  return new InquirerListQuestion<{ answer: string }>({
    type: "list",
    message: "Select your music file",
    choices: [...supportedFiles.map((file) => ({ name: file, value: path.join(directory, file) }))],
  });
};

const apiNCAI = (cache?: string) => {
  return new InquirerInputQuestion<{ answer: string }>({
    type: "input",
    message: "[BETA] Enter your NoCaptchaAI API Key, Empty to skip",
    validate: (answer: string) => {
      if (!answer) return true;
      return /^\S+$/.test(answer) ? true : "Invalid API Key";
    },
    default: cache,
  });
};